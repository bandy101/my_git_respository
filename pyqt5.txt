        #获得窗口
        qr = self.frameGeometry()
        #获得屏幕中心点
        cp = QDesktopWidget().availableGeometry().center()
        #显示到屏幕中心
        qr.moveCenter(cp)
        self.move(qr.topLeft())

      button.setToolTip('This is a <b>QPushButton</b> widget') /鼠标移动bt上的显示
        #设置窗口的图标，引用当前目录下的web.png图片
        self.setWindowIcon(QIcon('web.png'))        

mainLayout->setMargin(30);  //表示控件与窗体的左右边距

mainLayout->setSpacing(40); //表示各个控件之间的上下间距
QAction(QIcon('exit.png'), '&Exit', self)     
QAction可以操作菜单栏,工具栏,或自定义键盘快捷键。
QCheckBox.toggle() 勾选
显示图像：
self.frame = QImage(self.frame.tobytes(), self.frame.shape[1],self.frame.shape[0], QImage.Format_RGB888)
abel.resize(self.frame.width(),self.frame.height())
label.setPixmap(QPixmap.fromImage(self.frame))
label.setPixmap(QPixmap("09.png"))

label.adjustSize()方法将标签的大小调整到文本的长度。
QMimeData类提为数据提供一个容器，用来记录关于MIME类型数据的信息

绘图要在paintEvent()方法中实现。在QPainter对象的begin()与end()方法间编写绘图代码
    def paintEvent(self, event):
        qp = QPainter()
        qp.begin(self)
        self.drawText(event, qp)
        qp.end()
 
    def drawText(self, event, qp):
        qp.setPen(QColor(168, 34, 3))
        qp.setFont(QFont('Decorative', 10))
        qp.drawText(event.rect(), Qt.AlignCenter, self.text)
qp = QPainter()
metrics = qp.fontMetrics()  #获取字体（w,h）
 metrics.width(str(self.num[j]))

control.repaint() 重绘窗口调用paintEvent
设置窗口尺寸的方法：
1.设置宽度和高度。
resize(int w,int h)
resize(QSize s)
2.设置窗口的位置、宽度和高度。
setGeometry(int X,int Y,int W,int H)
setGeometry(QRect r)
3.设置窗口为固定值。
setFixedSize(int w,int h)
setFixedSize(QSize s)
窗口标题栏上的最大化按钮无效；用鼠标无法调整窗口尺寸。
4.设置窗口为固定值。
setFixedWidth(int w)
窗口标题栏上的最大化按钮无效；用鼠标无法调整窗口的宽度。
5.设置窗口为固定值。
setFixedHeight(int h)
窗口标题栏上的最大化按钮无效；用鼠标无法调整窗口的高度。
5.设置窗口的最小尺寸。
setMinimumSize(int w,int h)
setMinimumSize(QSize s)
用鼠标可以让窗口变宽、变高。
设置窗口的最小宽度：
setMinimumWidth(int w)
设置窗口的最小高度：
setMinimumHeight(int h)
6.设置窗口的最大尺寸。
setMaximumSize(int w,int h)
setMaximumSize(QSize s)
用鼠标可以让窗口变宽、变高。
设置窗口的最小宽度：
setMaximumWidth(int w)
设置窗口的最小高度：
setMaximumHeight(int h)
QSplitter的setOpaqueResize设置了分割窗口在缩放时的风格
假设一个QSplitter对象中有两个窗口，当你调整中间的分割线的位置时，
当该QSplitter对象的opaqueResize属性是false，
那么会出现一个虚线表示调整后的分割线的位置，反之，则什么也没有。
pe = QPalette()  
self.label.setAutoFillBackground(True)#设置背景充满，为设置背景颜色的必要条件  
pe.setColor(QPalette.Window,Qt.blue)#设置背景颜色
   QPalete::Window,通常指窗口部件的背景色;

    QPalette:WindowText,通常指窗口不见的前景色;

　 QPalette::Base,指文本输入窗口部件(比如QtextEdit,QLinedit等)的背景色.

    QPalette::Text,与QPalette::Base一块使用,指文本输入窗口部件的前景色;

    QPalette::Button,指按钮窗口部件的背景色;

    QPalette::ButtonText,指按钮窗口部件的前景色.
